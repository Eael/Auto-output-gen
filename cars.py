#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os
import os.path
from collections import defaultdict
from reportlab.platypus import SimpleDocTemplate
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie
from reportlab.lib.units import inch, cm

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = max(data, key=lambda item: item["total_sales"] * locale.atof(item["price"].strip("$")))
  max_sales = max(data, key=lambda item: item["total_sales"])
  car_year_sales = defaultdict(int)
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    # TODO: also handle max sales
  for item in data:
     car_year_sales[item["car"]["car_year"]] += item["total_sales"]

  popular_car_year = max(car_year_sales.items(), key=lambda x: x[1])
  pop_year, pop_sales = popular_car_year

  summary = [
        f"The {format_car(max_revenue['car'])} generated the most revenue: ${max_revenue['total_sales'] * locale.atof(max_revenue['price'].strip('$'))}",
        f"The {format_car(max_sales['car'])} had the most sales: {max_sales['total_sales']}",
        f"The most popular year was {pop_year} with {pop_sales} sales."
    ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  attachment_path = "/tmp/cars.pdf"
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  reports.generate(attachment_path, "Sales Summary for last month", "<br/>".join(summary), cars_dict_to_table(data))
  print("PDF OK")
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales Summary for last Month"
  body = "\n".join(summary)
  message = emails.generate(sender, receiver, subject, body, attachment_path)
  emails.send(message)

def pie():
 styles = getSampleStyleSheet()
 report = SimpleDocTemplate("/tmp/cars.pdf")
 report_title = Paragraph(" A Complete Inventory of My Fruit", styles["h1"])
 report_table = Table(data=table_data, style=table_style, hAlign="LEFT")
 report_pie = Pie(width=3*inch, height=3*inch)
 report_pie.data = []
 report_pie.labels = []
 for fruit_name in sorted(fruit):
   report_pie.data.append(fruit[fruit_name])
   report_pie.labels.append(fruit_name)
 report_chart = Drawing()
 report_chart.add(report_pie)

 report.build([report_title, report_table, report_chart])
if __name__ == "__main__":
  main(sys.argv)
